const fs = require('fs');
const path = require('path');

// Configuration
const config = {
  cssDir: 'src/assets/css',
  outputDir: 'src/assets/css/dist',
  outputFile: 'main.css',
  outputMinFile: 'main.min.css',
  cssFiles: [
    'fonts.css',
    'reset.css',
    'variables.css',
    'base.css',
    'header.css',
    'footer.css',
    'hero.css',
    'search-bar.css',
    'video-section.css',
    'services.css',
    'carousel.css',
    'reviews.css',
    'booking/form.css',
    'findStore/find.css',
    'search/search.css'
  ]
};

// Ensure output directory exists
if (!fs.existsSync(config.outputDir)) {
  fs.mkdirSync(config.outputDir, { recursive: true });
}

console.log('üöÄ Starting CSS build process...');
console.log('==================================================\n');

// Combine CSS files
let combinedCSS = '';
let imports = [];
const timestamp = new Date().toISOString();

// Header comment
combinedCSS += `/**
 * Pitstop - Combined CSS
 *
 * Generated: ${timestamp}
 * Source files: ${config.cssFiles.length}
 * Total size: ${(fs.statSync(path.join(config.cssDir, config.cssFiles[0])).size / 1024).toFixed(1)}KB
 *
 * Build command: node build-css.js
 *
 * DO NOT EDIT THIS FILE DIRECTLY
 * Edit source files in src/assets/css/ and rebuild
 */\n\n`;

console.log('üì¶ Combining CSS files...\n');

// Read and combine all CSS files
config.cssFiles.forEach((file, index) => {
  const filePath = path.join(config.cssDir, file);

  if (!fs.existsSync(filePath)) {
    console.log(`   ‚ö†Ô∏è  ${file} not found, skipping...`);
    return;
  }

  let content = fs.readFileSync(filePath, 'utf8');
  const fileSize = (fs.statSync(filePath).size / 1024).toFixed(1);

  // Extract @import statements
  const importMatches = content.match(/@import\s+url\([^)]+\);|@import\s+['"][^'"]+['"];/g);
  if (importMatches) {
    imports.push(...importMatches);
    console.log(`   ‚úì ${file} (${fileSize}KB) [has @import]`);
  } else {
    console.log(`   ‚úì ${file} (${fileSize}KB)`);
  }

  // Remove @imports from content
  const cleanContent = content.replace(/@import\s+url\([^)]+\);|@import\s+['"][^'"]+['"];/g, '').trim();

  // Add section marker and content
  combinedCSS += `/* ================================================================================
   SOURCE: ${file}
   FILE ${index + 1} of ${config.cssFiles.length}
   ================================================================================ */\n\n`;
  combinedCSS += cleanContent + '\n\n';
});

// Add imports at the top (after header comment)
if (imports.length > 0) {
  const headerEnd = combinedCSS.indexOf('*/\n\n') + 4;
  const header = combinedCSS.substring(0, headerEnd);
  const body = combinedCSS.substring(headerEnd);
  combinedCSS = header + '/* ========== EXTERNAL IMPORTS ========== */\n' + imports.join('\n') + '\n\n' + body;
}

// Write combined CSS
console.log('\nüìù Writing output files...\n');
const outputPath = path.join(config.outputDir, config.outputFile);
fs.writeFileSync(outputPath, combinedCSS);
const outputSize = (fs.statSync(outputPath).size / 1024).toFixed(1);
console.log(`   ‚úì ${config.outputFile} written (${outputSize}KB)`);

// Create minified version (simple minification)
const minified = combinedCSS
  .replace(/\/\*[\s\S]*?\*\//g, '') // Remove comments
  .replace(/\s+/g, ' ') // Collapse whitespace
  .replace(/\s*([\{\}:;,])\s*/g, '$1') // Remove spaces around special chars
  .trim();

const minPath = path.join(config.outputDir, config.outputMinFile);
fs.writeFileSync(minPath, minified);
const minSize = (fs.statSync(minPath).size / 1024).toFixed(1);
const compression = ((1 - minSize / outputSize) * 100).toFixed(1);
console.log(`   ‚úì ${config.outputMinFile} written (${minSize}KB)`);

console.log('\n==================================================');
console.log('‚úÖ CSS Build Complete!\n');
console.log(`üìä Build Statistics:`);
console.log(`   Files combined: ${config.cssFiles.length}`);
console.log(`   ${config.outputFile}: ${outputSize}KB`);
console.log(`   ${config.outputMinFile}: ${minSize}KB`);
console.log(`   Compression: ${compression}%`);
console.log(`   Build time: ${Date.now() - new Date(timestamp).getTime()}ms`);
console.log('\nüí° Next steps:');
console.log('   1. Test main.css in browser');
console.log('   2. Update HTML files to use dist/main.css');
console.log('   3. Use dist/main.min.css for production');
console.log('==================================================');
